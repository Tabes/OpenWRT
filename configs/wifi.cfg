#!/bin/ash
### BPI-R4 WiFi Configuration Script ###
### Configures WiFi 7 Radios with Guest Network ###
### Execute as root via SSH / Console ###

### === GLOBAL CONFIGURATION === ###
. /root/openWRT/config/global.cfg

set -e  ### Exit on any error ###

### === LOGGING FUNCTIONS === ###
log_message() {
    MESSAGE="$1"
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$TIMESTAMP] $MESSAGE" | tee -a "$LOG_FILE"
    echo ""
}

log_separator() {
    echo "================================================================================" | tee -a "$LOG_FILE"
}

### === SCRIPT HEADER === ###
clear
log_separator
log_message "BPI-R4 WiFi Configuration Starting"
log_message "Config Version: $CONFIG_VERSION ($CONFIG_DATE)"
log_separator

### === BACKUP CURRENT CONFIGURATION === ###
log_message "Creating wireless configuration backup..."
BACKUP_DIR="$BACKUP_PATH/wifi_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

uci export wireless > "$BACKUP_DIR/wireless.conf" 2>/dev/null || true
cp /etc/config/wireless "$BACKUP_DIR/wireless.original" 2>/dev/null || true

log_message "Backup saved to: $BACKUP_DIR"

### === WIRELESS INTERFACE RESET === ###
log_separator
log_message "Resetting wireless configuration..."

### Stop WiFi services ###
wifi down 2>/dev/null || true

### Delete existing wireless configuration ###
log_message "Removing existing wireless interfaces..."

### Get all wireless device sections ###
WIFI_DEVICES=$(uci show wireless | grep "wireless\..*=wifi-device" | cut -d'.' -f2 | cut -d'=' -f1 | sort -u)
WIFI_IFACES=$(uci show wireless | grep "wireless\..*=wifi-iface" | cut -d'.' -f2 | cut -d'=' -f1 | sort -u)

### Delete wifi-iface sections ###
for iface in $WIFI_IFACES; do
    echo "Deleting wifi-iface: $iface"
    uci delete wireless.$iface 2>/dev/null || true
done

### Reset wifi-device sections to defaults ###
for device in $WIFI_DEVICES; do
    echo "Resetting wifi-device: $device"
    uci set wireless.$device.disabled='1'
    uci delete wireless.$device.channel 2>/dev/null || true
    uci delete wireless.$device.htmode 2>/dev/null || true
    uci delete wireless.$device.country 2>/dev/null || true
done

### === RADIO CONFIGURATION === ###
log_separator
log_message "Configuring WiFi radios for country: $COUNTRY_CODE"

### Radio0 - 2.4GHz ###
log_message "Configuring Radio0 (2.4GHz)..."
uci set wireless.radio0=wifi-device
uci set wireless.radio0.type='mac80211'
uci set wireless.radio0.path='platform/18000000.wbsys/18000000.wbsys:wmac@0'
uci set wireless.radio0.band='2g'
uci set wireless.radio0.channel='auto'
uci set wireless.radio0.htmode='HE20'
uci set wireless.radio0.country="$COUNTRY_CODE"
uci set wireless.radio0.cell_density='0'
uci set wireless.radio0.disabled='0'

### Radio1 - 5GHz ###
log_message "Configuring Radio1 (5GHz)..."
uci set wireless.radio1=wifi-device
uci set wireless.radio1.type='mac80211'
uci set wireless.radio1.path='platform/18000000.wbsys/18000000.wbsys:wmac@1'
uci set wireless.radio1.band='5g'
uci set wireless.radio1.channel='auto'
uci set wireless.radio1.htmode='HE80'
uci set wireless.radio1.country="$COUNTRY_CODE"
uci set wireless.radio1.cell_density='0'
uci set wireless.radio1.disabled='0'

### Radio2 - 6GHz (WiFi 7) ###
log_message "Configuring Radio2 (6GHz WiFi 7)..."
uci set wireless.radio2=wifi-device
uci set wireless.radio2.type='mac80211'
uci set wireless.radio2.path='platform/18000000.wbsys/18000000.wbsys:wmac@2'
uci set wireless.radio2.band='6g'
uci set wireless.radio2.channel='auto'
uci set wireless.radio2.htmode='EHT160'
uci set wireless.radio2.country="$COUNTRY_CODE"
uci set wireless.radio2.cell_density='0'
uci set wireless.radio2.disabled='0'

### === MAIN NETWORK CONFIGURATION === ###
log_separator
log_message "Configuring main WiFi network: $MAIN_SSID"

### Main WiFi on 2.4GHz ###
uci set wireless.main_2g=wifi-iface
uci set wireless.main_2g.device='radio0'
uci set wireless.main_2g.mode='ap'
uci set wireless.main_2g.ssid="$MAIN_SSID"
uci set wireless.main_2g.encryption='sae-mixed'
uci set wireless.main_2g.key="$MAIN_PASSWORD"
uci set wireless.main_2g.network='lan'
uci set wireless.main_2g.ieee80211w='1'
uci set wireless.main_2g.disabled='0'

### Main WiFi on 5GHz ###
uci set wireless.main_5g=wifi-iface
uci set wireless.main_5g.device='radio1'
uci set wireless.main_5g.mode='ap'
uci set wireless.main_5g.ssid="$MAIN_SSID"
uci set wireless.main_5g.encryption='sae-mixed'
uci set wireless.main_5g.key="$MAIN_PASSWORD"
uci set wireless.main_5g.network='lan'
uci set wireless.main_5g.ieee80211w='1'
uci set wireless.main_5g.disabled='0'

### Main WiFi on 6GHz (WiFi 7) ###
uci set wireless.main_6g=wifi-iface
uci set wireless.main_6g.device='radio2'
uci set wireless.main_6g.mode='ap'
uci set wireless.main_6g.ssid="$MAIN_SSID"
uci set wireless.main_6g.encryption='sae'
uci set wireless.main_6g.key="$MAIN_PASSWORD"
uci set wireless.main_6g.network='lan'
uci set wireless.main_6g.ieee80211w='2'
uci set wireless.main_6g.disabled='0'

### === GUEST NETWORK CONFIGURATION === ###
log_separator
log_message "Configuring guest WiFi network: $GUEST_SSID"

### Create guest network bridge ###
log_message "Creating guest network bridge..."
uci set network.guest_dev=device
uci set network.guest_dev.name='guest_device'
uci set network.guest_dev.type='bridge'

### Guest network interface ###
uci set network.guest=interface
uci set network.guest.device='guest_device'
uci set network.guest.proto='static'
uci set network.guest.ipaddr="$GUEST_IP"
uci set network.guest.netmask='255.255.255.0'

### Guest WiFi on 2.4GHz ###
uci set wireless.guest_2g=wifi-iface
uci set wireless.guest_2g.device='radio0'
uci set wireless.guest_2g.mode='ap'
uci set wireless.guest_2g.ssid="$GUEST_SSID"
uci set wireless.guest_2g.encryption='sae-mixed'
uci set wireless.guest_2g.key="$GUEST_PASSWORD"
uci set wireless.guest_2g.network='guest'
uci set wireless.guest_2g.isolate='1'
uci set wireless.guest_2g.ieee80211w='1'
uci set wireless.guest_2g.disabled='0'

### Guest WiFi on 5GHz ###
uci set wireless.guest_5g=wifi-iface
uci set wireless.guest_5g.device='radio1'
uci set wireless.guest_5g.mode='ap'
uci set wireless.guest_5g.ssid="$GUEST_SSID"
uci set wireless.guest_5g.encryption='sae-mixed'
uci set wireless.guest_5g.key="$GUEST_PASSWORD"
uci set wireless.guest_5g.network='guest'
uci set wireless.guest_5g.isolate='1'
uci set wireless.guest_5g.ieee80211w='1'
uci set wireless.guest_5g.disabled='0'

### === GUEST DHCP CONFIGURATION === ###
log_message "Configuring guest DHCP on network: $GUEST_SUBNET"

### Guest DHCP ###
uci set dhcp.guest=dhcp
uci set dhcp.guest.interface='guest'
uci set dhcp.guest.start="$DHCP_START"
uci set dhcp.guest.limit="$DHCP_LIMIT"
uci set dhcp.guest.leasetime='2h'
uci set dhcp.guest.dhcpv4='server'

### === ADVANCED WIRELESS SETTINGS === ###
log_separator
log_message "Applying advanced wireless settings..."

### Security enhancements ###
uci set wireless.main_2g.wpa_disable_eapol_key_retries='1'
uci set wireless.main_5g.wpa_disable_eapol_key_retries='1'
uci set wireless.main_6g.wpa_disable_eapol_key_retries='1'
uci set wireless.guest_2g.wpa_disable_eapol_key_retries='1'
uci set wireless.guest_5g.wpa_disable_eapol_key_retries='1'

### Performance optimizations ###
uci set wireless.radio0.beacon_int='100'
uci set wireless.radio1.beacon_int='100'
uci set wireless.radio2.beacon_int='100'

uci set wireless.radio0.dtim_period='2'
uci set wireless.radio1.dtim_period='2'
uci set wireless.radio2.dtim_period='2'

### Band steering and load balancing ###
uci set wireless.main_2g.disassoc_low_ack='1'
uci set wireless.main_5g.disassoc_low_ack='1'
uci set wireless.main_6g.disassoc_low_ack='1'

### === CREATE HELPER SCRIPTS === ###
log_separator
log_message "Creating WiFi helper scripts..."

### WiFi Status Script ###
cat > "$HELPER_PATH/wifi_status.sh" << 'EOF'
#!/bin/ash
### Load global configuration ###
. /root/openWRT/config/global.cfg

echo "=== WIFI STATUS ==="
echo "Wireless Devices:"
uci show wireless | grep "=wifi-device" | while read line; do
    device=$(echo "$line" | cut -d'.' -f2 | cut -d'=' -f1)
    disabled=$(uci get wireless.$device.disabled 2>/dev/null || echo "0")
    band=$(uci get wireless.$device.band 2>/dev/null || echo "unknown")
    channel=$(uci get wireless.$device.channel 2>/dev/null || echo "auto")
    echo "  $device: Band=$band, Channel=$channel, Disabled=$disabled"
done
echo ""
echo "Wireless Interfaces:"
uci show wireless | grep "=wifi-iface" | while read line; do
    iface=$(echo "$line" | cut -d'.' -f2 | cut -d'=' -f1)
    ssid=$(uci get wireless.$iface.ssid 2>/dev/null || echo "no-ssid")
    network=$(uci get wireless.$iface.network 2>/dev/null || echo "no-network")
    disabled=$(uci get wireless.$iface.disabled 2>/dev/null || echo "0")
    echo "  $iface: SSID='$ssid', Network=$network, Disabled=$disabled"
done
echo ""
echo "Active WiFi Interfaces:"
iwconfig 2>/dev/null | grep -E "(IEEE|ESSID|Mode)" || echo "No active WiFi interfaces"
echo ""
echo "WiFi Scan:"
iw dev | grep Interface | while read line; do
    iface=$(echo "$line" | awk '{print $2}')
    echo "Interface: $iface"
    iw dev $iface scan 2>/dev/null | grep -E "(BSS|SSID|signal)" | head -10 || echo "  Scan failed or no networks found"
done
EOF
chmod +x "$HELPER_PATH/wifi_status.sh"

### WiFi Restart Script ###
cat > "$HELPER_PATH/wifi_restart.sh" << 'EOF'
#!/bin/ash
### Load global configuration ###
. /root/openWRT/config/global.cfg

echo "=== WIFI RESTART ==="
echo "Stopping WiFi..."
wifi down
sleep 3
echo "Starting WiFi..."
wifi up
sleep 5
echo "WiFi restart completed"
echo ""
echo "Current Status:"
$HELPER_PATH/wifi_status.sh
EOF
chmod +x "$HELPER_PATH/wifi_restart.sh"

### WiFi Security Test Script ###
cat > "$HELPER_PATH/wifi_security.sh" << 'EOF'
#!/bin/ash
### Load global configuration ###
. /root/openWRT/config/global.cfg

echo "=== WIFI SECURITY CHECK ==="
echo "Checking encryption settings..."
uci show wireless | grep -E "(encryption|ieee80211w|key)" | while read line; do
    echo "  $line"
done
echo ""
echo "Checking isolation settings..."
uci show wireless | grep "isolate" | while read line; do
    echo "  $line"
done
echo ""
echo "Checking WPS status (should be disabled)..."
uci show wireless | grep "wps" | while read line; do
    echo "  $line"
done || echo "  WPS not configured (good)"
echo ""
echo "Network Configuration:"
echo "  Main SSID: $MAIN_SSID"
echo "  Guest SSID: $GUEST_SSID"
echo "  Guest Network: $GUEST_SUBNET"
EOF
chmod +x "$HELPER_PATH/wifi_security.sh"

### WiFi Performance Test Script ###
cat > "$HELPER_PATH/wifi_performance.sh" << 'EOF'
#!/bin/ash
### Load global configuration ###
. /root/openWRT/config/global.cfg

echo "=== WIFI PERFORMANCE CHECK ==="
echo "Radio Performance Settings:"
for radio in radio0 radio1 radio2; do
    if uci get wireless.$radio.disabled 2>/dev/null | grep -q "0"; then
        band=$(uci get wireless.$radio.band 2>/dev/null || echo "unknown")
        htmode=$(uci get wireless.$radio.htmode 2>/dev/null || echo "unknown")
        channel=$(uci get wireless.$radio.channel 2>/dev/null || echo "auto")
        beacon=$(uci get wireless.$radio.beacon_int 2>/dev/null || echo "default")
        echo "  $radio ($band): Mode=$htmode, Channel=$channel, Beacon=$beacon ms"
    else
        echo "  $radio: Disabled"
    fi
done
echo ""
echo "Client Connections:"
iw dev | grep Interface | while read line; do
    iface=$(echo "$line" | awk '{print $2}')
    echo "Interface: $iface"
    iw dev $iface station dump 2>/dev/null | grep -E "(Station|signal|tx bitrate|rx bitrate)" || echo "  No clients connected"
done
EOF
chmod +x "$HELPER_PATH/wifi_performance.sh"

### === COMMIT CONFIGURATION === ###
log_separator
log_message "Committing WiFi configuration..."

uci commit wireless
uci commit network
uci commit dhcp

### === WIFI ACTIVATION === ###
log_message "Activating WiFi interfaces..."

### Start WiFi ###
wifi up 2>/dev/null || true
sleep 5

### === CONFIGURATION SUMMARY === ###
log_separator
log_message "WiFi Configuration Summary"
log_separator

echo "Radio Configuration:"
echo "  ✓ Radio0: 2.4GHz (HE20) - Channel: auto"
echo "  ✓ Radio1: 5GHz (HE80) - Channel: auto" 
echo "  ✓ Radio2: 6GHz WiFi 7 (EHT160) - Channel: auto"
echo "  ✓ Country Code: $COUNTRY_CODE"
echo ""
echo "Main WiFi Network:"
echo "  ✓ SSID: $MAIN_SSID"
echo "  ✓ Security: WPA3-SAE/WPA2 Mixed Mode"
echo "  ✓ Network: LAN ($LAN1_SUBNET)"
echo "  ✓ Available on: 2.4GHz, 5GHz, 6GHz"
echo ""
echo "Guest WiFi Network:"
echo "  ✓ SSID: $GUEST_SSID"
echo "  ✓ Security: WPA3-SAE/WPA2 Mixed Mode"
echo "  ✓ Network: Guest ($GUEST_SUBNET)"
echo "  ✓ DHCP: $GUEST_IP.$DHCP_START-$((DHCP_START + DHCP_LIMIT - 1))"
echo "  ✓ Client Isolation: Enabled"
echo "  ✓ Available on: 2.4GHz, 5GHz"
echo ""
echo "Security Features:"
echo "  ✓ WPA3-SAE encryption (where supported)"
echo "  ✓ Management Frame Protection (PMF)"
echo "  ✓ Guest network isolation"
echo "  ✓ EAPOL key retry protection"
echo ""
echo "Helper Scripts Created:"
echo "  ✓ $HELPER_PATH/wifi_status.sh - Show WiFi status"
echo "  ✓ $HELPER_PATH/wifi_restart.sh - Restart WiFi services"
echo "  ✓ $HELPER_PATH/wifi_security.sh - Check security settings"
echo "  ✓ $HELPER_PATH/wifi_performance.sh - Check performance metrics"
echo ""
echo "Backup saved to: $BACKUP_DIR"

log_separator
log_message "WiFi Configuration Completed Successfully"
log_separator

log_message "Next steps:"
log_message "1. Check WiFi status: $HELPER_PATH/wifi_status.sh"
log_message "2. Test WiFi connectivity with devices"
log_message "3. Verify guest network isolation"
log_message "4. Configure firewall rules for guest network"
log_message "5. Test WiFi 7 performance on 6GHz band"

echo ""
echo "WiFi Networks configured:"
echo "- Main: '$MAIN_SSID' (LAN access on $LAN1_SUBNET)"
echo "- Guest: '$GUEST_SSID' (Isolated network on $GUEST_SUBNET)"
echo ""
echo "WiFi 7 is ready on 6GHz for compatible devices!"