#!/bin/ash
### BPI-R4 Preparation Script ###
### Sets up Basic Router Configuration ###
### Execute as root via SSH / Console ###

set -e  ### Exit on any error ###

### === LOGGING FUNCTIONS === ###
log_message() {
    MESSAGE="$1"
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$TIMESTAMP] $MESSAGE" | tee -a "$LOG_FILE"
    echo ""
}

log_separator() {
    echo "================================================================================" | tee -a "$LOG_FILE"
}

### === CREATE DIRECTORIES === ###
mkdir -p "$LOG_PATH"
mkdir -p "$BACKUP_PATH"
mkdir -p "$HELPER_PATH"

### === SCRIPT HEADER === ###
clear
log_separator
log_message "BPI-R4 Basic Router Configuration Starting"
log_separator

### === STORAGE CHECK === ###
log_message "Checking available storage space..."
AVAILABLE_SPACE=$(df /tmp | tail -1 | awk '{print $4}')

if [ "$AVAILABLE_SPACE" -lt 50000 ]; then
    echo "WARNING: Low storage space available: ${AVAILABLE_SPACE}KB"
    read -p "Continue anyway? (y/N): " CONTINUE
    
    if [ "$CONTINUE" != "y" ] && [ "$CONTINUE" != "Y" ]; then
        log_message "Installation aborted due to low storage"
        exit 1
    fi
fi

log_message "Storage check passed: ${AVAILABLE_SPACE}KB available"

### === BACKUP CURRENT CONFIGURATION === ###
log_message "Creating configuration backup..."
BACKUP_DIR="$BACKUP_PATH/prepare_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

uci export network > "$BACKUP_DIR/network.conf" 2>/dev/null || true
uci export dhcp > "$BACKUP_DIR/dhcp.conf" 2>/dev/null || true
uci export wireless > "$BACKUP_DIR/wireless.conf" 2>/dev/null || true

log_message "Backup saved to: $BACKUP_DIR"

### === COMPLETE NETWORK RESET === ###
log_separator
log_message "Performing complete network reset..."

### Delete all existing interfaces ###
log_message "Deleting all existing interfaces..."
INTERFACES=$(uci show network | grep "network\." | grep "=interface" | cut -d'.' -f2 | cut -d'=' -f1 | sort -u)

for iface in $INTERFACES; do
    if [ "$iface" != "loopback" ]; then
        echo "Deleting interface: $iface"
        uci delete network.$iface 2>/dev/null || true
    fi
done

### Delete all existing devices ###
log_message "Deleting all existing devices..."
DEVICES=$(uci show network | grep "network\." | grep "=device" | cut -d'.' -f2 | cut -d'=' -f1 | sort -u)

for device in $DEVICES; do
    echo "Deleting device: $device"
    uci delete network.$device 2>/dev/null || true
done

### Delete anonymous sections ###
log_message "Cleaning up anonymous sections..."
while uci delete network.@device[0] 2>/dev/null; do
    echo "Deleted anonymous device section"
done

while uci delete network.@interface[0] 2>/dev/null; do
    echo "Deleted anonymous interface section"
done

### Delete DHCP configurations ###
log_message "Cleaning up DHCP configurations..."
DHCP_SECTIONS=$(uci show dhcp | grep "dhcp\." | grep "=dhcp" | cut -d'.' -f2 | cut -d'=' -f1 | sort -u)

for dhcp_iface in $DHCP_SECTIONS; do
    echo "Deleting DHCP config: $dhcp_iface"
    uci delete dhcp.$dhcp_iface 2>/dev/null || true
done

### === CREATE BASIC INTERFACES === ###
log_separator
log_message "Creating basic network configuration..."

### Ensure loopback exists ###
log_message "Configuring loopback interface..."
uci set network.loopback=interface
uci set network.loopback.device='lo'
uci set network.loopback.proto='static'
uci set network.loopback.ipaddr='127.0.0.1'
uci set network.loopback.netmask='255.0.0.0'

### === WAN CONFIGURATION === ###
log_message "Configuring WAN interface (DHCP)..."

### WAN Device - using first available ethernet port ###
uci set network.wan_dev=device
uci set network.wan_dev.name='wan_device'
uci set network.wan_dev.type='bridge'
uci set network.wan_dev.ports='eth1'

### WAN Interface ###
uci set network.wan=interface
uci set network.wan.device='wan_device'
uci set network.wan.proto='dhcp'
uci set network.wan.hostname="$ROUTER_HOSTNAME"

### WAN6 Interface for IPv6 ###
uci set network.wan6=interface
uci set network.wan6.device='wan_device'
uci set network.wan6.proto='dhcpv6'
uci set network.wan6.reqaddress='try'
uci set network.wan6.reqprefix='auto'

### === LAN CONFIGURATION === ###
log_message "Configuring LAN interfaces..."

### Main LAN Device - using switch ports ###
uci set network.lan_dev=device
uci set network.lan_dev.name='lan_device'
uci set network.lan_dev.type='bridge'
uci set network.lan_dev.ports='lan0'

### Main LAN Interface (192.168.1.1) ###
uci set network.lan=interface
uci set network.lan.device='lan_device'
uci set network.lan.proto='static'
uci set network.lan.ipaddr="$LAN1_IP"
uci set network.lan.netmask='255.255.255.0'

### === ADDITIONAL LAN NETWORKS === ###

### LAN2 Device ###
uci set network.lan2_dev=device
uci set network.lan2_dev.name='lan2_device'
uci set network.lan2_dev.type='bridge'
uci set network.lan2_dev.ports='lan1'

### LAN2 Interface (192.168.17.1) ###
uci set network.lan2=interface
uci set network.lan2.device='lan2_device'
uci set network.lan2.proto='static'
uci set network.lan2.ipaddr="$LAN2_IP"
uci set network.lan2.netmask='255.255.255.0'

### LAN3 Device ###
uci set network.lan3_dev=device
uci set network.lan3_dev.name='lan3_device'
uci set network.lan3_dev.type='bridge'
uci set network.lan3_dev.ports='lan2'

### LAN3 Interface (192.168.18.1) ###
uci set network.lan3=interface
uci set network.lan3.device='lan3_device'
uci set network.lan3.proto='static'
uci set network.lan3.ipaddr="$LAN3_IP"
uci set network.lan3.netmask='255.255.255.0'

### === DHCP CONFIGURATION === ###
log_separator
log_message "Configuring DHCP services..."

### Main LAN DHCP (192.168.1.0/24) ###
uci set dhcp.lan=dhcp
uci set dhcp.lan.interface='lan'
uci set dhcp.lan.start="$DHCP_START"
uci set dhcp.lan.limit="$DHCP_LIMIT"
uci set dhcp.lan.leasetime="$DHCP_LEASETIME"
uci set dhcp.lan.dhcpv4='server'
uci set dhcp.lan.dhcpv6='server'
uci set dhcp.lan.ra='server'

### LAN2 DHCP (192.168.17.170-190) ###
uci set dhcp.lan2=dhcp
uci set dhcp.lan2.interface='lan2'
uci set dhcp.lan2.start="$DHCP_START"
uci set dhcp.lan2.limit="$DHCP_LIMIT"
uci set dhcp.lan2.leasetime="$DHCP_LEASETIME"
uci set dhcp.lan2.dhcpv4='server'

### LAN3 DHCP (192.168.18.170-190) ###
uci set dhcp.lan3=dhcp
uci set dhcp.lan3.interface='lan3'
uci set dhcp.lan3.start="$DHCP_START"
uci set dhcp.lan3.limit="$DHCP_LIMIT"
uci set dhcp.lan3.leasetime="$DHCP_LEASETIME"
uci set dhcp.lan3.dhcpv4='server'

### === DNS CONFIGURATION === ###
log_message "Configuring DNS settings..."

### Configure dnsmasq ###
uci set dhcp.@dnsmasq[0].domainneeded='1'
uci set dhcp.@dnsmasq[0].boguspriv='1'
uci set dhcp.@dnsmasq[0].filterwin2k='0'
uci set dhcp.@dnsmasq[0].localise_queries='1'
uci set dhcp.@dnsmasq[0].rebind_protection='1'
uci set dhcp.@dnsmasq[0].rebind_localhost='1'
uci set dhcp.@dnsmasq[0].local='/lan/'
uci set dhcp.@dnsmasq[0].domain='lan'
uci set dhcp.@dnsmasq[0].expandhosts='1'
uci set dhcp.@dnsmasq[0].nonegcache='0'
uci set dhcp.@dnsmasq[0].authoritative='1'
uci set dhcp.@dnsmasq[0].readethers='1'
uci set dhcp.@dnsmasq[0].leasefile='/tmp/dhcp.leases'
uci set dhcp.@dnsmasq[0].resolvfile='/tmp/resolv.conf.d/resolv.conf.auto'

### === FIREWALL ZONES === ###
log_separator
log_message "Configuring basic firewall zones..."

### Create firewall zones configuration ###
uci set firewall.@zone[0].name='lan'
uci set firewall.@zone[0].input='ACCEPT'
uci set firewall.@zone[0].output='ACCEPT'
uci set firewall.@zone[0].forward='ACCEPT'
uci delete firewall.@zone[0].network 2>/dev/null || true
uci add_list firewall.@zone[0].network='lan'
uci add_list firewall.@zone[0].network='lan2'
uci add_list firewall.@zone[0].network='lan3'

uci set firewall.@zone[1].name='wan'
uci set firewall.@zone[1].input='REJECT'
uci set firewall.@zone[1].output='ACCEPT'
uci set firewall.@zone[1].forward='REJECT'
uci set firewall.@zone[1].masq='1'
uci set firewall.@zone[1].mtu_fix='1'
uci delete firewall.@zone[1].network 2>/dev/null || true
uci add_list firewall.@zone[1].network='wan'
uci add_list firewall.@zone[1].network='wan6'

### === CREATE HELPER SCRIPTS === ###
log_separator
log_message "Creating helper scripts..."

### Network Status Script ###
cat > "$HELPER_PATH/network_status.sh" << 'EOF'
#!/bin/ash
echo "=== NETWORK STATUS ==="
echo "Interface Status:"
ip addr show | grep -E "(lan_device|lan2_device|lan3_device|wan_device|eth)"
echo ""
echo "Routing Table:"
ip route show
echo ""
echo "DHCP Leases:"
cat /tmp/dhcp.leases 2>/dev/null || echo "No DHCP leases found"
echo ""
echo "WiFi Status:" 
iwconfig 2>/dev/null | grep -E "(IEEE|ESSID|Mode)" || echo "No WiFi interfaces active"
echo ""
echo "5G Modem Status:"
if [ -e /dev/cdc-wdm0 ]; then
    uqmi -d /dev/cdc-wdm0 --get-signal-info 2>/dev/null || echo "Modem not ready"
else
    echo "5G Modem not detected"
fi
EOF
chmod +x "$HELPER_PATH/network_status.sh"

### WiFi Scan Script ###
cat > "$HELPER_PATH/wifi_scan.sh" << 'EOF'
#!/bin/ash
echo "=== WIFI SCAN ==="
for radio in radio0 radio1 radio2; do
    echo "Scanning $radio:"
    iw dev | grep -A 5 "$radio" || echo "$radio not active"
done
EOF
chmod +x "$HELPER_PATH/wifi_scan.sh"

### 5G Modem Test Script ###
cat > "$HELPER_PATH/modem_test.sh" << 'EOF'
#!/bin/ash
echo "=== 5G MODEM TEST ==="
if [ -e /dev/cdc-wdm0 ]; then
    echo "Modem detected: /dev/cdc-wdm0"
    echo "Signal Info:"
    uqmi -d /dev/cdc-wdm0 --get-signal-info
    echo "System Info:"
    uqmi -d /dev/cdc-wdm0 --get-system-info
else
    echo "5G Modem not detected"
    echo "Available USB devices:"
    lsusb
fi
EOF
chmod +x "$HELPER_PATH/modem_test.sh"

### Quick Network Test Script ###
cat > "$HELPER_PATH/network_test.sh" << 'EOF'
#!/bin/ash
echo "=== NETWORK CONNECTIVITY TEST ==="
echo "Testing LAN connectivity..."
ping -c 2 "$LAN1_IP" && echo "✓ LAN ($LAN1_IP) reachable" || echo "✗ LAN unreachable"
ping -c 2 "$LAN2_IP" && echo "✓ LAN2 ($LAN2_IP) reachable" || echo "✗ LAN2 unreachable"
ping -c 2 "$LAN3_IP" && echo "✓ LAN3 ($LAN3_IP) reachable" || echo "✗ LAN3 unreachable"
echo ""
echo "Testing WAN connectivity..."
ping -c 2 8.8.8.8 && echo "✓ Internet (8.8.8.8) reachable" || echo "✗ No internet connection"
ping -c 2 google.com && echo "✓ DNS resolution working" || echo "✗ DNS resolution failed"
EOF
chmod +x "$HELPER_PATH/network_test.sh"

### === COMMIT CONFIGURATION === ###
log_separator
log_message "Committing configuration changes..."

uci commit network
uci commit dhcp

### === ENABLE SYSTEM SERVICES === ###
log_message "Enabling system services..."
/etc/init.d/uhttpd enable
/etc/init.d/dropbear enable
/etc/init.d/dnsmasq enable
/etc/init.d/firewall enable
/etc/init.d/network enable

### === CONFIGURATION SUMMARY === ###
log_separator
log_message "Basic Router Configuration Summary"
log_separator

echo "Network Configuration:"
echo "  ✓ WAN Interface: DHCP on eth1 (gets IP from upstream router)"
echo "  ✓ LAN Interface: $LAN1_SUBNET on lan0 (DHCP: $LAN1_IP.$DHCP_START-$((DHCP_START + DHCP_LIMIT - 1)))"
echo "  ✓ LAN2 Interface: $LAN2_SUBNET on lan1 (DHCP: $LAN2_IP.$DHCP_START-$((DHCP_START + DHCP_LIMIT - 1)))"
echo "  ✓ LAN3 Interface: $LAN3_SUBNET on lan2 (DHCP: $LAN3_IP.$DHCP_START-$((DHCP_START + DHCP_LIMIT - 1)))"
echo ""
echo "Services Enabled:"
echo "  ✓ Web Interface (uhttpd)"
echo "  ✓ SSH Access (dropbear)"
echo "  ✓ DHCP Server (dnsmasq)"
echo "  ✓ Firewall (fw4)"
echo "  ✓ Network Management"
echo ""
echo "Helper Scripts Created:"
echo "  ✓ $HELPER_PATH/network_status.sh - Show network status"
echo "  ✓ $HELPER_PATH/wifi_scan.sh - Scan for WiFi networks"
echo "  ✓ $HELPER_PATH/modem_test.sh - Test 5G modem"
echo "  ✓ $HELPER_PATH/network_test.sh - Test network connectivity"
echo ""
echo "Backup saved to: $BACKUP_DIR"

log_separator
log_message "Basic Router Configuration Completed Successfully"
log_separator

log_message "Next steps:"
log_message "1. Restart network services: /etc/init.d/network restart"
log_message "2. Test connectivity: $HELPER_PATH/network_test.sh"
log_message "3. Connect devices to LAN ports and test DHCP"
log_message "4. Access web interface: http://192.168.1.1"

echo ""
echo "Router is now configured as:"
echo "- WAN: Gets IP via DHCP (connect to upstream router)"
echo "- LAN1: 192.168.1.x network"
echo "- LAN2: 192.168.17.x network" 
echo "- LAN3: 192.168.18.x network"
echo ""
echo "Ready for interface and network configuration scripts!"